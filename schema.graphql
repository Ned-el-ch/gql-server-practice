const { gql } = require('apollo-server');

exports.typeDefs = gql`

enum EventType {
  DEVICE_DATA_HAMGE
  ASYNC
}

interface Event {
  id: ID!
  name: String!
}

"""
Represents a user in the Global Asset Management Solution
"""

interface User {
  id: String!
  username: String!
}

"""
Define
"""

enum ConsumableType {
  """
  Heat not burn consumable
  """
  HEET
  """
  Liquid consumable
  """
  POD
}

enum ActivationStatus {
  UNKNOWN
  ACTIVATED
  DEACTIAVTED
}

interface Asset {
  id: ID!
}

interface Tracking {
  placeholder: String
}

type Activation {
  """
  flag to specify iof activation is a requirement for a device
  """
  requiresActivation: Boolean!
  """
  flag to specify the actual activation status of the device
  this should be set only when reuires_activation is set to true
  """
  activationStatus: ActivationStatus!
}

type Material {
  """
  Device Management attributes
  """
  description: String!
  group: String!
  modelNumber: String!
  brandFamily: String!
  color: String!
}

type Device implements Asset {
  id: ID!
  serialNumber: String!
  codentifyID: String!
  activation: Activation!
  material: Material!
}

type Accessory implements Asset {
  id: ID!
  serialNumber: String
  tracking: Tracking
}

type Consumable implements Asset {
  id: ID!
  consumableType: ConsumableType!
  tracking: Tracking!
}

type Consumer implements User {
  """
  A list of all of the consumer's registered devices
  """
  id: String!
  username: String!
  deviceList: [Device!]!
}

type Coach implements User {
  id: String!
  username: String!
  placeholder: String
}

type CallCenterAgent implements User {
  id: String!
  username: String!
  placeholder: String
}

input AuthPayload {
  token: String!
}

input DeviceActivationInput {
  assetID: ID!
  authPayload: AuthPayload!
}

input DeviceDeactivationInput {
  assetID: ID!
  authPayload: AuthPayload!
}

type Query {
  device(auth: AuthPayload!): Device!
  activationStatus(deviceIDs: [ID!]!): ActivationStatus!
}

type Mutation {
  activateDevice(activationInput: DeviceActivationInput!): String! 
  deactivateDevice(activationInput: DeviceDeactivationInput!): String! 
}
`;